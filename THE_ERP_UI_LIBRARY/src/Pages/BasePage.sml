(******************************************************************************
 * BasePage.sml: Provides a reusable functor for constructing ERP UI pages with
 * standardized header, footer, and navigation menu bar.
 *
 * This module defines the PAGE signature and the BasePage functor, which generates
 * a page layout with a header, optional menu bar, and footer. Designed for use in
 * ERP applications to ensure consistency and modularity across different pages.
 *
 * Intended Usage:
 *   - Instantiate the BasePage functor with a title to create a PAGE module.
 *   - Use the create function to assemble the page's main content and navigation.
 *
 * Example Usage:
 *   structure MyPage = BasePage(struct val title = "Dashboard" end)
 *   val (mainBox, menuBar) = MyPage.create {stack = myStack, menuItems = SOME [("Home", "homePage")]}
 *
 * Author: Omosefe Osakue
 * Date: 2025-05-09
 *******************************************************************************)

(* Importing required modules *)
use "../LayoutComponents/AppState.sml";
use "../LayoutComponents/Header.sml";
use "../LayoutComponents/Footer.sml"; 
use "../Tokens/SpacingScale.sml";

(******************************************************************************
 * PAGE: Signature for page modules generated by BasePage functor.
 *
 * val create : {stack : Gtk.Stack.t, menuItems : (string * string) list option} 
 *              -> Gtk.Box.t * Gtk.Box.t
 *   - stack: The Gtk.Stack.t navigation stack for page switching.
 *   - menuItems: Optional list of (label, pageName) menu items for navigation.
 *   - Returns: A tuple of (main content box, menu bar box).
 ******************************************************************************)
signature PAGE = sig
  val create : { stack : Gtk.Stack.t, menuItems : (string * string) list option } -> Gtk.Box.t * Gtk.Box.t 
end

(******************************************************************************
 * BasePage: Functor for constructing standardized ERP UI pages.
 *
 * Parameters:
 *   Inputs.title : string - The title to display in the header.
 *
 * Usage:
 *   structure MyPage = BasePage(struct val title = "Dashboard" end)
 *
 * Provides:
 *   val create : {stack, menuItems} -> Gtk.Box.t * Gtk.Box.t
 ******************************************************************************)
functor BasePage (Inputs: sig 
    val title : string 
  end) : PAGE = struct

  open Gtk

  (* Creates menu bar *)
  fun createMenuBar (stack : Gtk.Stack.t, items : (string * string) list) =
    let
      val menuBarBox = Box.new (Orientation.HORIZONTAL, SpacingScale.small)
      val () = Container.setBorderWidth menuBarBox SpacingScale.xsmall
      
      fun createMenuButton (label, pageName) =
        let
          val button = Button.newWithLabel label
          val () = Button.setRelief button ReliefStyle.NONE
          val () = Widget.setMarginStart button SpacingScale.small
          val () = Widget.setMarginEnd button SpacingScale.small
          
          val _ = Signal.connect button (Button.clickedSig, fn _ =>
            let
              val () = print ("Navigating to " ^ pageName ^ "\n")
              val () = Stack.setVisibleChildName stack pageName
            in
              ()
            end)
        in
          button
        end
      
      val () = List.app (fn item =>
        let
          val button = createMenuButton item
        in
          Box.packStart menuBarBox (button, false, false, 0)
        end) items
    in
      menuBarBox
    end

  fun create {stack : Gtk.Stack.t, menuItems : (string * string) list option} =
    let
      val mainBox = Box.new (Orientation.VERTICAL, 0)

      val username = if Inputs.title = "Login" 
                     then NONE
                     else SOME "admin"
                     
                     
      val headerWidget = Header.create {
        imagePath = SOME "resources/images/logo.png",  
        text = Inputs.title,            
        username = username     
      }
      val () = Box.packStart mainBox (headerWidget, false, false, 0)
     
      (* Create and add menu bar if menuItems is provided *)
      val () = case menuItems of
          NONE => ()
        | SOME items =>
            let
              val menuBarWidget = createMenuBar (stack, items)
              val () = Box.packStart mainBox (menuBarWidget, false, false, 0)
              
              val separator = Separator.new Orientation.HORIZONTAL
              val () = Widget.setMarginTop separator SpacingScale.xsmall
              val () = Widget.setMarginBottom separator SpacingScale.xsmall
              val () = Box.packStart mainBox (separator, false, false, 0)
            in
              ()
            end

      (* Creates scrollable content area *)
      val scrolledWindow = ScrolledWindow.new (NONE, NONE) 
      val () = ScrolledWindow.setPolicy scrolledWindow (PolicyType.AUTOMATIC, PolicyType.AUTOMATIC) 
      val () = Widget.setVexpand scrolledWindow true 

      val contentBox = Box.new (Orientation.VERTICAL, 0)
      val () = Container.setBorderWidth contentBox SpacingScale.inset
      val () = Container.add scrolledWindow contentBox 

      val () = Box.packStart mainBox (scrolledWindow, true, true, 0) 

      (* Adds footer *)
      val footerWidget = Footer.create {
        copyright = "(C) 2024 ACME. All rights reserved.",
        version = "Version 1.0.0"
      }
      val () = Box.packStart mainBox (footerWidget, false, false, 0) 
    in
      (mainBox, contentBox) 
    end
end